import { parse } from "https://deno.land/std@0.175.0/flags/mod.ts"
import {generateComponentFile} from './generate-component-file.js'
import {generateComponentDocsCss} from './generate-component-docs-css.js'
import {generateComponentCss} from './generate-component-css.js'
import {generateDenoConfig} from './generate-deno-config.js'
import {generateDocsMarkdownTemplate} from './generate-docs-markdown-template.js'
import {generatePandocTemplate} from './generate-pandoc-template.js'
import {generateSampleHtml} from './generate-sample-html.js'
import { kebabToCamel, kebabToOstrich } from "./case.js"

/*

The is a command-line tool for scaffolding out a docling.js component.

It is run like this:

```
$ scaffold-component my-component
```

In this case we want to create  a custom HTML element called `<my-component>`.

So the element sets the `slug` to `my-component`, and `componentName` to `MyComponent`. 

Having done this, a directory of the same name is created with 7 files.

0. `<slug>/` - a directory that contains all the following files:
1. `<componentName>.js` - Javascript for the component
2. `<slug>.html` - HTML sample page which instantiates the component
3. `<slug>.css` - CSS file for storing default CSS for the compoent
4. `<slug>-docs.md`- markdown file with some default headings, etc, for documenting the component: edit this and compile with `deno task build`, which runs pandoc. -
5. `<slug>-docs.html` - compiled documentation for the component, generated by pandoc. do not edit. 
6. `<slug>-docs.md` - docs css - and css specific to the component documentation.
7. `deno.json` - This is a simple [deno configuration file](https://deno.com/manual@v1.32.5/getting_started/configuration_file) that defines the task `build` which builds (or rebuilds) the `<slug>-docs.html` file. It can be run with `deno task build`, and requires [`pandoc`](https://pandoc.org/) to be installed.

Note: we may fold this tool into the [docling-cli](https://github.com/doclingjs/docling-cli/) project in the future.

*/

let flags = parse(Deno.args)

if(!flags._[0]){
  console.log("Component name required: $ scaffold-component my-component");
  Deno.exit(1); // exit with status code 1 (error)
}

const slug = flags._[0]

if(!slug.includes("-")){
  console.log("Component name must include hyphen: my-component")
  Deno.exit(1); // exit with status code 1 (error)

}

try {
  const dirInfo = await Deno.stat(slug);
  if (dirInfo.isDirectory) {
    console.log(`Directory ${slug} already exists. To overwrite, use --force Exiting program...`);
    Deno.exit(0); // exit with status code 0 (success)
  }
} catch (error) {
  if (error instanceof Deno.errors.NotFound) {
  } else {
    console.log("Error checking directory:", error);
    Deno.exit(1); // exit with status code 1 (error)
  }
}

await Deno.mkdir(slug)



const componentName = kebabToCamel(slug)

const componentConfig = {
  slug,
  componentName
}

let componentJs = generateComponentFile(componentConfig)
await Deno.writeTextFile(`${slug}/${componentName}.js`, componentJs)

let componentDocsCss = generateComponentDocsCss(componentConfig)
await Deno.writeTextFile(`${slug}/${slug}-docs.css`, componentDocsCss)

let sampleHtml = generateSampleHtml(componentConfig)
await Deno.writeTextFile(`${slug}/${slug}.html`, sampleHtml)

let componentCss = generateComponentCss(componentConfig)
await Deno.writeTextFile(`${slug}/${slug}.css`, componentCss)

let denoConfig = generateDenoConfig(componentConfig)
await Deno.writeTextFile(`${slug}/deno.json`, denoConfig)

let template = generatePandocTemplate(componentConfig)
Deno.writeTextFileSync(`${slug}/template.html`, template)

let docsMarkdownTemplate = generateDocsMarkdownTemplate(componentConfig)
await Deno.writeTextFile(`${slug}/${slug}-docs.md`, docsMarkdownTemplate) 
